<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android on Website of SauceWu </title>
    <link>https://saucewu.github.io/tags/android/</link>
    <description>Recent content in android on Website of SauceWu </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 10 May 2020 15:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://saucewu.github.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从 setTint 引发的Drawable 的缓存问题</title>
      <link>https://saucewu.github.io/posts/drawable%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 10 May 2020 15:00:00 +0000</pubDate>
      
      <guid>https://saucewu.github.io/posts/drawable%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid>
      <description>从 setTint 引发的Drawable 的缓存问题 这两天在做一个新需求是突然发现 DrawableCompat.setTint()更改drawable 渲染颜色的方法居然是全局生效的。变相说明getResource().getDrawable() 每次取出drawable的时候都是从一个缓存池里面出去的。
避免缓存的解决方案 第一反应是clone一个新的对象出来进行修改 但是貌似drawable并没有实现Cloneable的借口0那看来得想想别的办法了</description>
    </item>
    
    <item>
      <title>WebView实现离线缓存</title>
      <link>https://saucewu.github.io/posts/android-webview%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E7%BC%93%E5%AD%98/</link>
      <pubDate>Tue, 10 Mar 2020 20:00:00 +0000</pubDate>
      
      <guid>https://saucewu.github.io/posts/android-webview%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E7%BC%93%E5%AD%98/</guid>
      <description>WebView实现离线缓存 场景 在App在长期发展之中，对动态性要求很高的 活动页面 或是 一些带有简单功能的详情页面都可能会有大量Webview使用的情况。但是webview初始化时极有可能遇到网络波动的影响导致加载不出 或者 会重复下载一些公共资源造成性能问题。这时我们希望有一种缓存方案能够暂时解决这些初始化变慢的问题
原理 android WebViewClient提供了shouldInterceptRequest的接口供我们使用这个接口会拦截webview所有请求。如果错误缓存了资源，可能会出现web页面无法更新的情况。所以用的时候要谨慎只对我们需要使用缓存的部分进行拦截</description>
    </item>
    
    <item>
      <title>关于 Androidx 的5.x版本 webview crash</title>
      <link>https://saucewu.github.io/posts/androidx-webview%E5%B4%A9%E6%BA%83/</link>
      <pubDate>Tue, 10 Mar 2020 15:00:00 +0000</pubDate>
      
      <guid>https://saucewu.github.io/posts/androidx-webview%E5%B4%A9%E6%BA%83/</guid>
      <description>关于 Androidx 的5.x版本 webview crash 这两更新了androidx compat 在5.x一下版本手机上遇到crash问题
android.content.res.Resources$NotFoundException: String resource ID #0x2040002 确定是androidx 1.</description>
    </item>
    
    <item>
      <title> WebView页面 软键盘弹出无法正确折叠页面的问题</title>
      <link>https://saucewu.github.io/posts/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E8%BD%AF%E9%94%AE%E7%9B%98%E5%BC%B9%E5%87%BA%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 03 May 2018 18:30:00 +0000</pubDate>
      
      <guid>https://saucewu.github.io/posts/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E8%BD%AF%E9%94%AE%E7%9B%98%E5%BC%B9%E5%87%BA%E9%97%AE%E9%A2%98/</guid>
      <description>WebView页面 软键盘弹出无法正确折叠页面的问题 问题出在webview页面 选中webview中edit控件弹出的软键盘 无法正确折叠页面 遮挡了输入框。一开始认为是webview的适配问题，想当然的加上了
&amp;lt;activity android:name=&amp;#34;.WebViewActivity&amp;#34; android:windowSoftInputMode=&amp;#34;adjustPan&amp;#34; &amp;gt; .</description>
    </item>
    
    <item>
      <title>Android 编译期的黑科技（三）-字节码篇</title>
      <link>https://saucewu.github.io/posts/android-%E7%BC%96%E8%AF%91%E6%9C%9F%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80%E4%B8%89-%E5%AD%97%E8%8A%82%E7%A0%81%E7%AF%87/</link>
      <pubDate>Thu, 05 Apr 2018 19:00:00 +0000</pubDate>
      
      <guid>https://saucewu.github.io/posts/android-%E7%BC%96%E8%AF%91%E6%9C%9F%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80%E4%B8%89-%E5%AD%97%E8%8A%82%E7%A0%81%E7%AF%87/</guid>
      <description>@(奇淫技巧)
Android 编译期的黑科技（三）-字节码篇 字节码织入 可以绕过编译，直接操作字节码，从而实现代码注入。所以使用 Javassist 的时机就是在构建工具 Gradle 将源 文件编译成 .</description>
    </item>
    
    <item>
      <title>Android 编译期的黑科技（二）基础篇</title>
      <link>https://saucewu.github.io/posts/android-%E7%BC%96%E8%AF%91%E6%9C%9F%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80%E4%BA%8C-aop%E7%AF%87/</link>
      <pubDate>Sat, 17 Mar 2018 19:00:00 +0000</pubDate>
      
      <guid>https://saucewu.github.io/posts/android-%E7%BC%96%E8%AF%91%E6%9C%9F%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80%E4%BA%8C-aop%E7%AF%87/</guid>
      <description>@(奇淫技巧)
Android 编译期的黑科技（二）-AOP篇 AOP 定义 AOP 是 Aspect Oriented Programming 的缩写，即“面向切面编程”。使用 AOP，可以在编译期间对代码进行动态管理， 以达到统一维护的目的。AOP 是 OOP 编程的一种延续，也是 Spring 框架中的一个重要模块。利用 AOP 可以对业务逻辑 的各个模块进行隔离，从而使得业务逻辑各个部分之间的耦合度降低，提高程序的可重用性，同时提高开发的效率。利用 AOP，我们可以在无浸入的在宿主中插入一些代码逻辑，从而可以实现一些特殊的功能，比如日志埋点、性能监控、动态 权限控制、代码调试等。</description>
    </item>
    
    <item>
      <title>Android 编译期的黑科技（一）基础篇</title>
      <link>https://saucewu.github.io/posts/android-%E7%BC%96%E8%AF%91%E6%9C%9F%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80%E4%B8%80%E5%9F%BA%E7%A1%80%E7%AF%87/</link>
      <pubDate>Sat, 10 Mar 2018 19:00:00 +0000</pubDate>
      
      <guid>https://saucewu.github.io/posts/android-%E7%BC%96%E8%AF%91%E6%9C%9F%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80%E4%B8%80%E5%9F%BA%E7%A1%80%E7%AF%87/</guid>
      <description>Android 编译期的黑科技（一）基础篇 序言  为什么需要这些编译期的黑科技 使用这些编译期的小工具可以有效减少 重复代码和重复逻辑 在android中大量运用的ButterKnife Gilde Room和DataBind都大量的时候用编译期生成代码的技术 哪里可以用到这些 应用场景很多 最经典的应用场景是无痕埋点技术和解决重复逻辑 为什么需要这个基础篇 直接上工具当然也可以使用，但毕竟写代码 知其然还要知其所以然 不然除了各种问题无法解决就很尴尬了  什么是编译 它主要的目的是将便于人编写、阅读、维护的高级计算机语言所写作的源代码程序，翻译为计算机能解读、运行的低阶机器语言的程序，也就是可执行文件。编译器将原始程序（source program）作为输入，翻译产生使用目标语言（target language）的等价程序。源代码一般为高级语言（High-level language），如Pascal、C、C++、C# 、Java等，而目标语言则是汇编语言或目标机器的目标代码（Object code），有时也称作机器代码（Machine code）。 java编译专指 .</description>
    </item>
    
    <item>
      <title>Fragment 踩坑实录</title>
      <link>https://saucewu.github.io/posts/fragment-%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95/</link>
      <pubDate>Sat, 10 Feb 2018 15:00:00 +0000</pubDate>
      
      <guid>https://saucewu.github.io/posts/fragment-%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95/</guid>
      <description>@(四大组件)
Fragment 踩坑实录 不要轻易使用commitNowAllowingStateLoss 在很多情况下使用不正确使用Fragment 会导致 java.lang.IllegalStateException 网上很多推荐commitNowAllowingStateLoss 来治标 但使用commitNowAllowingStateLoss 会导致当前Fragment 以其子Fragment 丢失状态 如 getVisibility() isHidden() 等等 而且会出现很多不可预知的问题</description>
    </item>
    
  </channel>
</rss>